/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package escape_from_grid;

import java.util.ArrayList;
import java.util.List;

import javax.swing.plaf.synth.SynthStyle;
import javax.swing.text.StyledEditorKit;

public class App {
    // private static int stepCount = 0;
    // インデックスで納めてる
    // private static int[] playerPos = { 3, 4 };
    private static int[] playerPos = { 3, 3 };
    private static int[] prevPos = { -1, -1 };
    private static int H = 6;
    private static int W = 5;
    // private static int H = 7;
    // private static int W = 6;
    private static final String wallStr = "#";
    private static final String roadStr = ".";
    private static String[][] map = {
            { ".", "#", "#", "#", "#" },
            { "#", ".", "#", "#", "#" },
            { ".", ".", "#", ".", "#" },
            { "#", ".", ".", "S", "#" },
            { "#", ".", ".", ".", "#" },
            { ".", "#", "#", "#", "." },
    };
    // private static String[][] map = {
    // { ".", "#", "#", "#", "#", "#" },
    // { "#", "#", ".", ".", ".", "#" },
    // { "#", "#", ".", ".", ".", "#" },
    // { "#", "#", ".", ".", "S", "#" },
    // { "#", "#", ".", ".", ".", "#" },
    // { "#", "#", ".", ".", ".", "#" },
    // { "#", "#", "#", "#", "#", "#" },
    // };
    // private static String[][] map = {
    // { "#", "#", "#", "#", "#", "#" },
    // { "#", ".", ".", ".", ".", "#" },
    // { "#", ".", "#", "#", ".", "#" },
    // { "#", ".", "#", "S", ".", "#" },
    // { "#", ".", "#", "#", "#", "#" },
    // { "#", ".", ".", ".", ".", "." },
    // { "#", "#", "#", "#", "#", "#" },
    // };

    public static void main(String[] args) {
        int[] topWallPos = getTopWallPos();
        System.out.println(topWallPos[0] + " " + topWallPos[1]);

        List<int[]> list = getWayList(topWallPos, wallStr, false);
        list.forEach(item -> System.out.println(item[0] + " " + item[1]));
        // checkStrict(playerPos);
        // int result = check();
        // System.out.println(result);

        // if (result == 0) {
        // // 何かしらの処理
        // boolean canEscape = escapeFromGrid(playerPos);
        // System.out.println(canEscape ? "Yes" : "No");
        // } else {
        // System.out.println(result == 1 ? "Yes" : "No");
        // }
    }

    // true 囲まれてない
    // false 囲まれてる
    // 一番外側が全部壁かどうか
    private static boolean checkOuter() {
        boolean result = false;
        // 横方向
        for (int i = 0; i < H; i += H - 1) {
            for (int j = 1; j < W - 1; j++) {
                if (!map[i][j].equals("#")) {
                    System.out.println("A " + i + " " + j);
                    return true;
                }
            }
        }

        // 縦方向
        for (int i = 0; i < W; i += W - 1) {
            for (int j = 1; j < H - 1; j++) {
                if (!map[j][i].equals("#")) {
                    System.out.println("B " + j + " " + i);
                    return true;
                }
            }
        }
        return result;
    }

    // true 囲まれてない
    // false 囲まれてる
    // private static boolean checkOuter() {
    // boolean result = false;
    // // 上の辺
    // for (int i = 1; i < W; i++) {
    // if (!map[0][i].equals("#")) {
    // return true;
    // }
    // }
    // // 左の辺
    // for (int i = 1; i < H; i++) {
    // if (!map[i][0].equals("#")) {
    // return true;
    // }
    // }
    // // 下の辺
    // for (int i = 1; i < W; i++) {
    // if (!map[H - 1][i].equals("#")) {
    // return true;
    // }
    // }
    // // 右の辺
    // for (int i = 1; i < H; i++) {
    // if (!map[i][W - 1].equals("#")) {
    // return true;
    // }
    // }
    // return result;
    // }

    private static int[] getTopWallPos() {
        int[] topWallPos = { -1, -1 };
        for (int i = playerPos[0]; i >= 0; i--) {
            if (map[i][playerPos[1]].equals(wallStr)) {
                topWallPos = new int[] { i, playerPos[1] };
                break;
            }
        }
        return topWallPos;
    }

    // true 囲まれてない
    // false 囲まれてる
    private static boolean checkStrict(int[] pos) {
        int topWallY = -1;
        int leftWallX = -1;
        for (int i = pos[0]; i >= 0; i--) {
            if (map[i][pos[1]].equals("#")) {
                topWallY = i;
                break;
            }
        }
        if (topWallY == -1)
            return true;
        System.out.println("found: " + topWallY + " " + pos[1]);
        int[] topWallPos = { topWallY, pos[1] };

        // 左へ移動していく
        for (int i = topWallPos[1]; i >= 0; i--) {
            System.out.println(topWallPos[0] + " " + i);
            if (!map[topWallPos[0]][i].equals("#") || i == 0) {
                if (i > 0 && map[topWallY + 1][i - 1].equals("#")) {
                    leftWallX = i - 1;
                } else if (map[topWallY + 1][i].equals("#")) {
                    leftWallX = i;
                }
            }
        }
        if (leftWallX == -1)
            return true;
        System.out.println("found: " + (topWallY + 1) + " " + leftWallX);

        return false;
    }

    private static boolean escapeFromGrid(int[] pos) {
        // stepCount++;
        // int thisStepCount = stepCount;
        System.out.println("escapeFromGrid");
        boolean b = false;

        // falseの間回すのがまずい
        // while (!b) {
        List<int[]> wayList = getWayList(pos, roadStr, true);
        System.out.println(wayList.size());
        if (wayList.size() == 1 && wayList.get(0)[0] == prevPos[0] && wayList.get(0)[1] == prevPos[1])
            return false;
        for (int[] arr : wayList) {
            if (b)
                break;
            // 前回の位置は選択から外れる
            if (arr[0] == prevPos[0] && arr[1] == prevPos[1])
                continue;
            // ゼロが含まれてたら出口なので終了
            if (arr[0] == 0 || arr[1] == 0 || arr[0] == H - 1 || arr[1] == W - 1) {
                System.out.println("exit");
                b = true;
                break;
                // return b;
            } else {
                System.out.println("else");
                prevPos[0] = pos[0];
                prevPos[1] = pos[1];
                playerPos[0] = arr[0];
                playerPos[1] = arr[1];
                b = escapeFromGrid(arr);
                // if (thisStepCount != 1) {
                // return b;
                // }
            }
        }
        // }
        return b;
    }

    // pos 検索したい位置
    // targetStr 検索したい文字
    private static List<int[]> getWayList(int[] pos, String targetStr, boolean isStrict) {
        System.out.println("pos " + pos[0] + " " + pos[1]);
        List<int[]> wayList = new ArrayList();
        // 上
        if (pos[0] > 0 && map[pos[0] - 1][pos[1]].equals(targetStr)) {
            System.out.println("A");
            wayList.add(new int[] { pos[0] - 1, pos[1] });
        }
        // 下
        if (pos[0] < H - 1 && map[pos[0] + 1][pos[1]].equals(targetStr)) {
            System.out.println("B");
            wayList.add(new int[] { pos[0] + 1, pos[1] });
        }
        // 左
        if (pos[1] > 0 && map[pos[0]][pos[1] - 1].equals(targetStr)) {
            System.out.println("C");
            wayList.add(new int[] { pos[0], pos[1] - 1 });
        }
        // 右
        if (pos[1] < W - 1 && map[pos[0]][pos[1] + 1].equals(targetStr)) {
            System.out.println("D");
            wayList.add(new int[] { pos[0], pos[1] + 1 });
        }

        // 壁の判定用
        // 斜め右上
        if (!isStrict && pos[0] > 0 && pos[1] < W - 1 && map[pos[0] - 1][pos[1] + 1].equals(targetStr)) {
            System.out.println("AA");
            wayList.add(new int[] { pos[0] - 1, pos[1] + 1 });
        }
        // 斜め右下
        if (!isStrict && pos[0] < H - 1 && pos[1] < W - 1 && map[pos[0] + 1][pos[1] + 1].equals(targetStr)) {
            System.out.println("BB");
            wayList.add(new int[] { pos[0] + 1, pos[1] + 1 });
        }
        // 斜め左下
        if (!isStrict && pos[1] > 0 && pos[0] < H - 1 && map[pos[0] + 1][pos[1] - 1].equals(targetStr)) {
            System.out.println("CC");
            wayList.add(new int[] { pos[0] + 1, pos[1] - 1 });
        }
        // 斜め左上
        if (!isStrict && pos[1] > 0 && pos[0] > 0 && map[pos[0] - 1][pos[1] - 1].equals(targetStr)) {
            System.out.println("DD");
            wayList.add(new int[] { pos[0] - 1, pos[1] - 1 });
        }

        return wayList;
    }

    // そもそも出口に居たり周りが全部壁だったりしないかチェック
    private static int check() {
        // 0 特に異常なし 1 そもそも出口 -1 周り囲まれてる
        int result = 0;
        if (playerPos[0] == 0 || playerPos[0] == H - 1 || playerPos[1] == 0 || playerPos[1] == W - 1) {
            result = 1;
        } else if (map[playerPos[0] - 1][playerPos[1]].equals(wallStr)
                && map[playerPos[0] + 1][playerPos[1]].equals(wallStr)
                && map[playerPos[0]][playerPos[1] - 1].equals(wallStr)
                && map[playerPos[0]][playerPos[1] + 1].equals(wallStr)) {
            result = -1;
        }
        return result;
    }
}
